{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "tabs",
  "type": "registry:component",
  "title": "Tabs",
  "description": "A tabs component",
  "files": [
    {
      "path": "src/tabs/tabs.tsx",
      "content": "\"use client\";\n\nimport { useEffect, useRef, useState } from \"react\";\n\nconst TABS = [\n\t{ label: \"All Posts\", value: \"all-posts\" },\n\t{ label: \"Interactions\", value: \"interactions\" },\n\t{ label: \"Resources\", value: \"resources\" },\n\t{ label: \"Docs\", value: \"docs\" },\n];\n\nexport function Tabs() {\n\tconst [activeTab, setActiveTab] = useState(TABS[0]?.value);\n\tconst containerRef = useRef<HTMLDivElement>(null);\n\tconst activeTabRef = useRef<HTMLButtonElement>(null);\n\n\t// biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n\tuseEffect(() => {\n\t\tconst container = containerRef.current;\n\n\t\tif (container && activeTab) {\n\t\t\tconst activeTabElement = activeTabRef.current;\n\n\t\t\tif (activeTabElement) {\n\t\t\t\tconst { offsetLeft, offsetWidth } = activeTabElement;\n\n\t\t\t\tconst clipLeft = offsetLeft;\n\t\t\t\tconst clipRight = offsetLeft + offsetWidth;\n\n\t\t\t\tcontainer.style.clipPath = `inset(0 ${Number(100 - (clipRight / container.offsetWidth) * 100).toFixed()}% 0 ${Number((clipLeft / container.offsetWidth) * 100).toFixed()}% round 17px)`;\n\t\t\t}\n\t\t}\n\t}, [activeTab, activeTabRef, containerRef]);\n\n\treturn (\n\t\t<div className=\"relative mx-auto flex w-fit flex-col items-center rounded-full\">\n\t\t\t<div\n\t\t\t\tref={containerRef}\n\t\t\t\tclassName=\"absolute z-10 w-full overflow-hidden [clip-path:inset(0px_75%_0px_0%_round_17px)] [transition:clip-path_0.25s_ease]\"\n\t\t\t>\n\t\t\t\t<div className=\"relative flex w-full justify-center bg-black dark:bg-white\">\n\t\t\t\t\t{TABS.map((tab) => (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tkey={tab.value}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tonClick={() => setActiveTab(tab.value)}\n\t\t\t\t\t\t\tclassName=\"flex h-8 items-center rounded-full p-3 text-sm font-medium text-white dark:text-black\"\n\t\t\t\t\t\t\ttabIndex={-1}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{tab.label}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div className=\"relative flex w-full justify-center\">\n\t\t\t\t{TABS.map((tab) => {\n\t\t\t\t\tconst isActive = activeTab === tab.value;\n\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tkey={tab.value}\n\t\t\t\t\t\t\ttype=\"button\"\n\t\t\t\t\t\t\tref={isActive ? activeTabRef : null}\n\t\t\t\t\t\t\tonClick={() => setActiveTab(tab.value)}\n\t\t\t\t\t\t\tclassName=\"flex h-8 items-center rounded-full p-3 text-sm font-medium text-neutral-500 dark:text-neutral-300\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{tab.label}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n",
      "type": "registry:component"
    }
  ]
}