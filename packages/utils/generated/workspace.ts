/**
 * ---------------------------------------------------------------------------
 * workspace-types.ts
 * This file is auto-generated to provide type-safe access to workspace names,
 * paths, and types for all detected workspaces in the monorepo. It enables
 * tooling and scripts to reference workspaces in a consistent, type-checked way.
 * Do not edit this file directly—run the generator script to update.
 *
 * @packageDocumentation
 * © 2025 Bank Kit – MIT License
 * ---------------------------------------------------------------------------
 */

export enum WorkspaceType {
	ROOT = "root",
	APP = "app",
	PACKAGE = "package",
}

export enum WORKSPACE_NAME {
	"@bank-kit/root" = "@bank-kit/root",
	"@bank-kit/cli" = "@bank-kit/cli",
	"@bank-kit/docs" = "@bank-kit/docs",
	"@bank-kit/server" = "@bank-kit/server",
	"@bank-kit/typescript-config" = "@bank-kit/typescript-config",
	"@bank-kit/registry" = "@bank-kit/registry",
	"@bank-kit/utils" = "@bank-kit/utils",
	"@bank-kit/ui" = "@bank-kit/ui",
}

export type WorkspaceName = keyof typeof WORKSPACE_NAME;

export interface WorkspaceDefinition {
	readonly name: WorkspaceName;
	readonly path: string;
	readonly type: WorkspaceType;
	readonly readPackageJson: () => Promise<unknown>;
}

const workspaceEntries = [
	[
		"@bank-kit/root",
		{
			name: "@bank-kit/root",
			path: "",
			type: WorkspaceType.ROOT,
			readPackageJson: async () => Bun.file("/package.json").json(),
		},
	] as const,
	[
		"@bank-kit/cli",
		{
			name: "@bank-kit/cli",
			path: "apps/cli",
			type: WorkspaceType.APP,
			readPackageJson: async () => Bun.file("apps/cli/package.json").json(),
		},
	] as const,
	[
		"@bank-kit/docs",
		{
			name: "@bank-kit/docs",
			path: "apps/docs",
			type: WorkspaceType.APP,
			readPackageJson: async () => Bun.file("apps/docs/package.json").json(),
		},
	] as const,
	[
		"@bank-kit/server",
		{
			name: "@bank-kit/server",
			path: "apps/server",
			type: WorkspaceType.APP,
			readPackageJson: async () => Bun.file("apps/server/package.json").json(),
		},
	] as const,
	[
		"@bank-kit/typescript-config",
		{
			name: "@bank-kit/typescript-config",
			path: "packages/typescript-config",
			type: WorkspaceType.PACKAGE,
			readPackageJson: async () =>
				Bun.file("packages/typescript-config/package.json").json(),
		},
	] as const,
	[
		"@bank-kit/registry",
		{
			name: "@bank-kit/registry",
			path: "packages/registry",
			type: WorkspaceType.PACKAGE,
			readPackageJson: async () =>
				Bun.file("packages/registry/package.json").json(),
		},
	] as const,
	[
		"@bank-kit/utils",
		{
			name: "@bank-kit/utils",
			path: "packages/utils",
			type: WorkspaceType.PACKAGE,
			readPackageJson: async () =>
				Bun.file("packages/utils/package.json").json(),
		},
	] as const,
	[
		"@bank-kit/ui",
		{
			name: "@bank-kit/ui",
			path: "packages/ui",
			type: WorkspaceType.PACKAGE,
			readPackageJson: async () => Bun.file("packages/ui/package.json").json(),
		},
	] as const,
] as const satisfies readonly (readonly [WorkspaceName, WorkspaceDefinition])[];

export const workspace = new Map<WorkspaceName, WorkspaceDefinition>(
	workspaceEntries,
);

export const resolveWorkspace = async (name: WorkspaceName) => {
	const path = await import("node:path");
	return path.join("../../..", workspace.get(name)?.path ?? "");
};
